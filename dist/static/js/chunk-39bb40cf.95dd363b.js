(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-39bb40cf"],{"0c42":function(e,n,i){"use strict";i.r(n);var t=function(){var e=this,n=e.$createElement,i=e._self._c||n;return i("div",{staticClass:"container"},[i("div",{attrs:{id:"cesiumContainer"}}),i("div",{staticClass:"button-view"},[i("el-button",{staticClass:"start",attrs:{type:"primary",plain:""},on:{click:e.start}},[e._v("绘制")]),i("el-button",{staticClass:"start",attrs:{type:"primary",plain:""},on:{click:e.edit}},[e._v("编辑")]),i("el-button",{staticClass:"start",attrs:{type:"primary",plain:""},on:{click:e.clear}},[e._v("清空")])],1)])},r=[],a=i("9192"),o=(i("decf"),i("eb3b"),[{codeLanguage:"VUE",relyOn:[{label:"uuid（npm）",url:"https://www.npmjs.com/package/uuid",externalLinks:!0}],code:[{codeLanguage:"html",content:'<template>\n                      <div class="container">\n                        <div id="cesiumContainer"></div>\n                        <div class="button-view">\n                          <el-button type="primary" plain class="start" @click="start">绘制</el-button>\n                          <el-button type="primary" plain class="start" @click="edit">编辑</el-button>\n                          <el-button type="primary" plain class="start" @click="clear">清空</el-button>\n                        </div>\n                      </div>\n                    </template>'},{codeLanguage:"js",content:'import { v4 as uuidv4 } from "uuid";\n                    export default {\n                      data() {\n                        return {\n                          viewer: null,\n                          handler: null,//事件\n                          centerPoint: null,//中心点\n                          ellipsoidGather: null,//采集的球对象\n                          ellipsoidGatherArr: [],//采集球体的实体数组\n                          ellipsoidGatherIndex: null,//当前编辑的球体\n                        };\n                      },\n                      mounted() {\n                        this.init();\n                      },\n                      methods: {\n                        init() {\n                          const Cesium = this.cesium;\n                          Cesium.Ion.defaultAccessToken = process.env.VUE_APP_TOKEN;\n                          this.viewer = new Cesium.Viewer("cesiumContainer", {\n                            imageryProvider: new Cesium.ArcGisMapServerImageryProvider({\n                              url: "https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer",\n                            }),\n                            terrainProvider: new Cesium.CesiumTerrainProvider({\n                              //加载火星在线地形\n                              url: "http://data.marsgis.cn/terrain",\n                            }),\n                            shouldAnimate: true,\n                            infoBox: false,\n                            selectionIndicator: false,\n                          });\n                          //设置贴地效果\n                          this.viewer.scene.globe.depthTestAgainstTerrain = false;\n                          //去掉双击事件\n                          this.viewer.cesiumWidget.screenSpaceEventHandler.removeInputAction(\n                            Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK\n                          );\n                        },\n                        /**\n                         * 开始\n                         *  */\n                        start() {\n                          const Cesium = this.cesium;\n                          const viewer = this.viewer;\n                    \n                          this.ellipsoidGather = null;\n                          //鼠标变成加号\n                          document.getElementById("cesiumContainer").style.cursor = "crosshair";\n                    \n                          //进制地图移动\n                          viewer.scene.screenSpaceCameraController.enableRotate = false;\n                          viewer.scene.screenSpaceCameraController.enableZoom = false;\n                          this.handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n                          //鼠标点击事件\n                          this.handler.setInputAction((event) => {\n                            //获取加载地形后对应的经纬度和高程：地标坐标\n                            var ray = viewer.camera.getPickRay(event.position);\n                            var cartesian = viewer.scene.globe.pick(ray, viewer.scene);\n                            //console.log("cartesian:", cartesian);\n                            if (!Cesium.defined(cartesian)) {\n                              return;\n                            }\n                            this.centerPoint = viewer.entities.add({\n                              id: uuidv4(),\n                              name: \'centerPoint\',\n                              position: cartesian,\n                              point: {\n                                color: Cesium.Color.CHARTREUSE.withAlpha(1),\n                                pixelSize: 10,\n                                heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,\n                                outlineColor: Cesium.Color.WHITE,\n                                outlineWidth: 1\n                              }\n                            });\n                            // 轨迹球体\n                            this.ellipsoidGather = viewer.entities.add({\n                              id: uuidv4(),\n                              position: cartesian,\n                              name: \'ellipsoid\',\n                              ellipsoid: {\n                                maximumCone: Cesium.Math.PI_OVER_TWO,\n                                radii: new Cesium.Cartesian3(0.1, 0.1, 0.1),\n                                material: Cesium.Color.GREENYELLOW.withAlpha(0.5)\n                              }\n                            })\n                            this.ellipsoidGatherArr.push(this.ellipsoidGather)\n                    \n                          }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n                    \n                    \n                          // 对鼠标移动事件的监听\n                          this.handler.setInputAction((event) => {\n                            if (this.centerPoint == null || this.ellipsoidGather == null) {\n                              return;\n                            }\n                            //获取加载地形后对应的经纬度和高程：地标坐标\n                            var ray = viewer.camera.getPickRay(event.endPosition);\n                            var radiusCartesian = viewer.scene.globe.pick(ray, viewer.scene);\n                            if (!radiusCartesian) {\n                              return;\n                            }\n                            var centerCartesian = this.centerPoint.position.getValue(Cesium.JulianDate.now());\n                            //计算移动点与中心点的距离（单位米）\n                            var centerTemp = viewer.scene.globe.ellipsoid.cartesianToCartographic(centerCartesian);\n                            var radiusTemp = viewer.scene.globe.ellipsoid.cartesianToCartographic(radiusCartesian);\n                            var geodesic = new Cesium.EllipsoidGeodesic();\n                            geodesic.setEndPoints(centerTemp, radiusTemp);\n                            var radius = geodesic.surfaceDistance;\n                            //console.log("radius",radius);\n                            //如果半径小于0,则不更新圆信息\n                            if (radius <= 0) {\n                              return;\n                            }\n                            this.ellipsoidGather.ellipsoid.radii = new Cesium.CallbackProperty(function (time, result) {\n                              return new Cesium.Cartesian3(radius, radius, radius);\n                            }, false);\n                          }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n                    \n                    \n                          // 对鼠标抬起事件的监听(结束点采集)\n                          this.handler.setInputAction((event) => {\n                            //鼠标变成默认\n                            document.getElementById("cesiumContainer").style.cursor = "default";\n                            //开始鼠标操作地图\n                            viewer.scene.screenSpaceCameraController.enableRotate = true;\n                            viewer.scene.screenSpaceCameraController.enableZoom = true;\n                            //移除地图鼠标点击事件\n                            this.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_DOWN)\n                            //移除地图鼠标移动事件\n                            this.handler.removeInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE)\n                            //移除地图鼠标抬起事件\n                            this.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_UP)\n                            var ellipsoid = viewer.scene.globe.ellipsoid;\n                            var cartographic = ellipsoid.cartesianToCartographic(this.centerPoint.position.getValue(Cesium.JulianDate.now()));\n                            var lat = Cesium.Math.toDegrees(cartographic.latitude);\n                            var lng = Cesium.Math.toDegrees(cartographic.longitude);\n                            var height = cartographic.height;\n                            console.log("圆中心点：经度", lng + ",纬度：" + lat + ",高度：" + height);\n                            console.log("圆半径：", this.ellipsoidGather.ellipsoid.radii.getValue().x + "米");\n                            //如果圆半径小于0.5米则删除，防止出现默认为0.1米的被采集。该种情况则是用户取消圆采集\n                            if (this.ellipsoidGather.ellipsoid.radii.getValue().x < 0.5) {\n                              viewer.entities.remove(this.ellipsoidGather);\n                              this.ellipsoidGather = null;\n                              this.handler = null\n                            }\n                            //清除圆中心点和半径点\n                            viewer.entities.remove(this.centerPoint);\n                            this.centerPoint = null;\n                          }, Cesium.ScreenSpaceEventType.LEFT_UP);\n                    \n                        },\n                        /**\n                         * 获取半径（米）/以及经纬度\n                         */\n                        getRadius(_entity) {\n                          const Cesium = this.cesium;\n                          const cartographic = Cesium.Cartographic.fromCartesian(_entity._position._value);\n                          const lat = Cesium.Math.toDegrees(cartographic.latitude);\n                          const lng = Cesium.Math.toDegrees(cartographic.longitude);\n                          const height = _entity._ellipsoid.radii.getValue().x\n                          return {\n                            lat,\n                            lng,\n                            height,\n                            _cartesian3: _entity._position._value\n                          }\n                        },\n                        /**\n                         * 编辑\n                         */\n                        edit() {\n                          const Cesium = this.cesium;\n                          const viewer = this.viewer;\n                          let edit_centerPoint, edit_boundaryPoint, edit_ellipsoidGatherId\n                          let left_click = false\n                          let Point_type = ""\n                    \n                          //进制地图移动\n                          viewer.scene.screenSpaceCameraController.enableRotate = false;\n                          viewer.scene.screenSpaceCameraController.enableZoom = false;\n                          this.handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n                          //鼠标点击事件\n                          this.handler.setInputAction((event) => {\n                            left_click = true\n                            const pick = viewer.scene.pick(event.position);\n                            if (pick) {\n                              const _Entity_ = pick.id\n                              //当前逻辑内 点击了球体\n                              if (_Entity_._name != "centerPoint" && _Entity_._name != "boundaryPoint") {\n                                viewer.entities.remove(edit_centerPoint);\n                                viewer.entities.remove(edit_boundaryPoint);\n                                const _filter_Entity = this.ellipsoidGatherArr.filter(item => item._id == _Entity_._id)\n                                if (_filter_Entity.length == 0) return\n                                //编辑的实体球\n                                const edit_Entity = _filter_Entity[0]\n                    \n                                //先拿到当前实体球的id\n                                edit_ellipsoidGatherId = edit_Entity._id\n                                //开始遍历 拿到球在数组中的索引位置  便于之后的移动球体\n                                for (let i = 0; i < this.ellipsoidGatherArr.length; i++) {\n                                  if (this.ellipsoidGatherArr[i]._id == edit_ellipsoidGatherId) {\n                                    this.ellipsoidGatherIndex = i\n                                  }\n                                }\n                    \n                                viewer.scene.screenSpaceCameraController.enableRotate = false;\n                                viewer.scene.screenSpaceCameraController.enableZoom = false;\n                    \n                                //球体位置信息获取/半径/高度/笛卡尔\n                                const { lng, lat, height, _cartesian3 } = this.getRadius(edit_Entity)\n                                //绘制中心点 start\n                                edit_centerPoint = viewer.entities.add({\n                                  id: uuidv4(),\n                                  name: \'centerPoint\',\n                                  position: Cesium.Cartesian3.fromDegrees(lng, lat, height),\n                                  point: {\n                                    color: Cesium.Color.RED.withAlpha(1),\n                                    pixelSize: 10,\n                                    outlineColor: Cesium.Color.WHITE,\n                                    outlineWidth: 1\n                                  }\n                                });\n                                //绘制中心点 end\n                                //绘制边界点 start\n                                const _cartesian3_ = {\n                                  ..._cartesian3,\n                                  x: _cartesian3.x - height\n                                }\n                                edit_boundaryPoint = viewer.entities.add({\n                                  id: uuidv4(),\n                                  name: \'boundaryPoint\',\n                                  position: _cartesian3_,\n                                  point: {\n                                    color: Cesium.Color.GREEN.withAlpha(1),\n                                    pixelSize: 10,\n                                    outlineColor: Cesium.Color.WHITE,\n                                    outlineWidth: 1\n                                  }\n                                });\n                                //绘制边界点 end\n                              } else {\n                                Point_type = _Entity_._name\n                              }\n                            }\n                          }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n                    \n                    \n                          //对鼠标移动事件的监听 Start\n                          this.handler.setInputAction((event) => {\n                            if (left_click && Point_type == "centerPoint") {\n                              console.log("挪动位置")\n                              const ellipsoid = viewer.scene.globe.ellipsoid;\n                              const cartesian = viewer.camera.pickEllipsoid(event.endPosition, ellipsoid);\n                              this.ellipsoidGatherArr[this.ellipsoidGatherIndex].position = cartesian\n                    \n                              //球体位置信息获取/半径/高度/笛卡尔\n                              const { lng, lat, height, _cartesian3 } = this.getRadius(this.ellipsoidGatherArr[this.ellipsoidGatherIndex])\n                              edit_centerPoint.position = Cesium.Cartesian3.fromDegrees(lng, lat, height)\n                              const _cartesian3_ = {\n                                ..._cartesian3,\n                                x: _cartesian3.x - height\n                              }\n                              edit_boundaryPoint.position = _cartesian3_\n                            }\n                            if (left_click && Point_type == "boundaryPoint") {\n                              console.log("准备改变半径")\n                              // const ellipsoid = viewer.scene.globe.ellipsoid;\n                              // const cartesian = viewer.camera.pickEllipsoid(event.endPosition, ellipsoid);\n                    \n                    \n                              //获取加载地形后对应的经纬度和高程：地标坐标\n                              var ray = viewer.camera.getPickRay(event.endPosition);\n                              var radiusCartesian = viewer.scene.globe.pick(ray, viewer.scene);\n                              if (!radiusCartesian) {\n                                return;\n                              }\n                              var centerCartesian = edit_centerPoint.position.getValue(Cesium.JulianDate.now());\n                              //计算移动点与中心点的距离（单位米）\n                              var centerTemp = viewer.scene.globe.ellipsoid.cartesianToCartographic(centerCartesian);\n                              var radiusTemp = viewer.scene.globe.ellipsoid.cartesianToCartographic(radiusCartesian);\n                              var geodesic = new Cesium.EllipsoidGeodesic();\n                              geodesic.setEndPoints(centerTemp, radiusTemp);\n                              var radius = geodesic.surfaceDistance;\n                              //console.log("radius",radius);\n                              //如果半径小于0,则不更新圆信息\n                              if (radius <= 0) {\n                                return;\n                              }\n                              this.ellipsoidGatherArr[this.ellipsoidGatherIndex].ellipsoid.radii = new Cesium.CallbackProperty(function (time, result) {\n                                return new Cesium.Cartesian3(radius, radius, radius);\n                              }, false);\n                              const ellipsoid = viewer.scene.globe.ellipsoid;\n                              const cartesian = viewer.camera.pickEllipsoid(event.endPosition, ellipsoid);\n                              edit_boundaryPoint.position = cartesian\n                            }\n                          }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n                          //对鼠标移动事件的监听 End\n                    \n                          //对鼠标抬起事件的监听 Start\n                          this.handler.setInputAction((event) => {\n                            left_click = false\n                            Point_type = ""\n                          }, Cesium.ScreenSpaceEventType.LEFT_UP);\n                          //对鼠标抬起事件的监听 End\n                          //鼠标右键点击 Start\n                          this.handler.setInputAction((event) => {\n                            viewer.scene.screenSpaceCameraController.enableRotate = true;\n                            viewer.scene.screenSpaceCameraController.enableZoom = true;\n                            left_click = false\n                            Point_type = ""\n                            viewer.entities.remove(edit_centerPoint);\n                            viewer.entities.remove(edit_boundaryPoint);\n                          }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n                          //鼠标右键点击 End\n                        },\n                        /**\n                         * 清空\n                         */\n                        clear() {\n                          this.viewer.entities.removeAll()\n                          this.centerPoint = null\n                          this.ellipsoidGather = null\n                          this.ellipsoidGatherArr = []\n                          this.ellipsoidGatherIndex = null\n                        }\n                      },\n                    };'},{codeLanguage:"css",content:".container {\n                        width: 100%;\n                        height: 100%;\n                      \n                        #cesiumContainer {\n                          width: 100%;\n                          height: 100%;\n                        }\n                      \n                        .button-view {\n                          position: fixed;\n                          bottom: 10px;\n                          right: 10px;\n                          display: flex;\n                      \n                          .start {\n                            width: 100px;\n                            height: 40px;\n                            margin-left: 10px;\n                          }\n                        }\n                      }"}]}]),s=i("896e"),l={data:function(){return{viewer:null,handler:null,centerPoint:null,ellipsoidGather:null,ellipsoidGatherArr:[],ellipsoidGatherIndex:null}},created:function(){this.$store.dispatch("highlight/set_code",o)},mounted:function(){this.init()},methods:{init:function(){var e=this.cesium;e.Ion.defaultAccessToken="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlNTIzZTZiYi05OWQxLTQ0OTUtYTUzNC1mYjYxNWI4OTZiZTYiLCJpZCI6OTA3MDUsImlhdCI6MTY1MDUzNDAzMn0.0f1DG8NlExZnbrueMn_AgO6GX_g_RASavpxAWcVymPs",this.viewer=new e.Viewer("cesiumContainer",{imageryProvider:new e.ArcGisMapServerImageryProvider({url:"https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer"}),terrainProvider:new e.CesiumTerrainProvider({url:"http://data.marsgis.cn/terrain"}),shouldAnimate:!0,infoBox:!1,selectionIndicator:!1}),this.viewer.scene.globe.depthTestAgainstTerrain=!1,this.viewer.cesiumWidget.screenSpaceEventHandler.removeInputAction(e.ScreenSpaceEventType.LEFT_DOUBLE_CLICK)},start:function(){var e=this,n=this.cesium,i=this.viewer;this.ellipsoidGather=null,document.getElementById("cesiumContainer").style.cursor="crosshair",i.scene.screenSpaceCameraController.enableRotate=!1,i.scene.screenSpaceCameraController.enableZoom=!1,this.handler=new n.ScreenSpaceEventHandler(i.scene.canvas),this.handler.setInputAction((function(t){var r=i.camera.getPickRay(t.position),a=i.scene.globe.pick(r,i.scene);n.defined(a)&&(e.centerPoint=i.entities.add({id:Object(s["a"])(),name:"centerPoint",position:a,point:{color:n.Color.CHARTREUSE.withAlpha(1),pixelSize:10,heightReference:n.HeightReference.CLAMP_TO_GROUND,outlineColor:n.Color.WHITE,outlineWidth:1}}),e.ellipsoidGather=i.entities.add({id:Object(s["a"])(),position:a,name:"ellipsoid",ellipsoid:{maximumCone:n.Math.PI_OVER_TWO,radii:new n.Cartesian3(.1,.1,.1),material:n.Color.GREENYELLOW.withAlpha(.5)}}),e.ellipsoidGatherArr.push(e.ellipsoidGather))}),n.ScreenSpaceEventType.LEFT_DOWN),this.handler.setInputAction((function(t){if(null!=e.centerPoint&&null!=e.ellipsoidGather){var r=i.camera.getPickRay(t.endPosition),a=i.scene.globe.pick(r,i.scene);if(a){var o=e.centerPoint.position.getValue(n.JulianDate.now()),s=i.scene.globe.ellipsoid.cartesianToCartographic(o),l=i.scene.globe.ellipsoid.cartesianToCartographic(a),c=new n.EllipsoidGeodesic;c.setEndPoints(s,l);var d=c.surfaceDistance;d<=0||(e.ellipsoidGather.ellipsoid.radii=new n.CallbackProperty((function(e,i){return new n.Cartesian3(d,d,d)}),!1))}}}),n.ScreenSpaceEventType.MOUSE_MOVE),this.handler.setInputAction((function(t){document.getElementById("cesiumContainer").style.cursor="default",i.scene.screenSpaceCameraController.enableRotate=!0,i.scene.screenSpaceCameraController.enableZoom=!0,e.handler.removeInputAction(n.ScreenSpaceEventType.LEFT_DOWN),e.handler.removeInputAction(n.ScreenSpaceEventType.MOUSE_MOVE),e.handler.removeInputAction(n.ScreenSpaceEventType.LEFT_UP);var r=i.scene.globe.ellipsoid,a=r.cartesianToCartographic(e.centerPoint.position.getValue(n.JulianDate.now())),o=n.Math.toDegrees(a.latitude),s=n.Math.toDegrees(a.longitude),l=a.height;console.log("圆中心点：经度",s+",纬度："+o+",高度："+l),console.log("圆半径：",e.ellipsoidGather.ellipsoid.radii.getValue().x+"米"),e.ellipsoidGather.ellipsoid.radii.getValue().x<.5&&(i.entities.remove(e.ellipsoidGather),e.ellipsoidGather=null,e.handler=null),i.entities.remove(e.centerPoint),e.centerPoint=null}),n.ScreenSpaceEventType.LEFT_UP)},getRadius:function(e){var n=this.cesium,i=n.Cartographic.fromCartesian(e._position._value),t=n.Math.toDegrees(i.latitude),r=n.Math.toDegrees(i.longitude),a=e._ellipsoid.radii.getValue().x;return{lat:t,lng:r,height:a,_cartesian3:e._position._value}},edit:function(){var e,n,i,t=this,r=this.cesium,o=this.viewer,l=!1,c="";o.scene.screenSpaceCameraController.enableRotate=!1,o.scene.screenSpaceCameraController.enableZoom=!1,this.handler=new r.ScreenSpaceEventHandler(o.scene.canvas),this.handler.setInputAction((function(d){l=!0;var p=o.scene.pick(d.position);if(p){var u=p.id;if("centerPoint"!=u._name&&"boundaryPoint"!=u._name){o.entities.remove(e),o.entities.remove(n);var h=t.ellipsoidGatherArr.filter((function(e){return e._id==u._id}));if(0==h.length)return;var m=h[0];i=m._id;for(var v=0;v<t.ellipsoidGatherArr.length;v++)t.ellipsoidGatherArr[v]._id==i&&(t.ellipsoidGatherIndex=v);o.scene.screenSpaceCameraController.enableRotate=!1,o.scene.screenSpaceCameraController.enableZoom=!1;var C=t.getRadius(m),g=C.lng,_=C.lat,f=C.height,w=C._cartesian3;e=o.entities.add({id:Object(s["a"])(),name:"centerPoint",position:r.Cartesian3.fromDegrees(g,_,f),point:{color:r.Color.RED.withAlpha(1),pixelSize:10,outlineColor:r.Color.WHITE,outlineWidth:1}});var E=Object(a["a"])(Object(a["a"])({},w),{},{x:w.x-f});n=o.entities.add({id:Object(s["a"])(),name:"boundaryPoint",position:E,point:{color:r.Color.GREEN.withAlpha(1),pixelSize:10,outlineColor:r.Color.WHITE,outlineWidth:1}})}else c=u._name}}),r.ScreenSpaceEventType.LEFT_DOWN),this.handler.setInputAction((function(i){if(l&&"centerPoint"==c){console.log("挪动位置");var s=o.scene.globe.ellipsoid,d=o.camera.pickEllipsoid(i.endPosition,s);t.ellipsoidGatherArr[t.ellipsoidGatherIndex].position=d;var p=t.getRadius(t.ellipsoidGatherArr[t.ellipsoidGatherIndex]),u=p.lng,h=p.lat,m=p.height,v=p._cartesian3;e.position=r.Cartesian3.fromDegrees(u,h,m);var C=Object(a["a"])(Object(a["a"])({},v),{},{x:v.x-m});n.position=C}if(l&&"boundaryPoint"==c){console.log("准备改变半径");var g=o.camera.getPickRay(i.endPosition),_=o.scene.globe.pick(g,o.scene);if(!_)return;var f=e.position.getValue(r.JulianDate.now()),w=o.scene.globe.ellipsoid.cartesianToCartographic(f),E=o.scene.globe.ellipsoid.cartesianToCartographic(_),y=new r.EllipsoidGeodesic;y.setEndPoints(w,E);var S=y.surfaceDistance;if(S<=0)return;t.ellipsoidGatherArr[t.ellipsoidGatherIndex].ellipsoid.radii=new r.CallbackProperty((function(e,n){return new r.Cartesian3(S,S,S)}),!1);var b=o.scene.globe.ellipsoid,P=o.camera.pickEllipsoid(i.endPosition,b);n.position=P}}),r.ScreenSpaceEventType.MOUSE_MOVE),this.handler.setInputAction((function(e){l=!1,c=""}),r.ScreenSpaceEventType.LEFT_UP),this.handler.setInputAction((function(i){o.scene.screenSpaceCameraController.enableRotate=!0,o.scene.screenSpaceCameraController.enableZoom=!0,l=!1,c="",o.entities.remove(e),o.entities.remove(n)}),r.ScreenSpaceEventType.RIGHT_CLICK)},clear:function(){this.viewer.entities.removeAll(),this.centerPoint=null,this.ellipsoidGather=null,this.ellipsoidGatherArr=[],this.ellipsoidGatherIndex=null}}},c=l,d=(i("72e6"),i("cba8")),p=Object(d["a"])(c,t,r,!1,null,"1a780c7c",null);n["default"]=p.exports},6222:function(e,n,i){},"72e6":function(e,n,i){"use strict";i("6222")},"896e":function(e,n,i){"use strict";var t,r=new Uint8Array(16);function a(){if(!t&&(t="undefined"!==typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!==typeof msCrypto&&"function"===typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),!t))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(r)}var o=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function s(e){return"string"===typeof e&&o.test(e)}for(var l=s,c=[],d=0;d<256;++d)c.push((d+256).toString(16).substr(1));function p(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=(c[e[n+0]]+c[e[n+1]]+c[e[n+2]]+c[e[n+3]]+"-"+c[e[n+4]]+c[e[n+5]]+"-"+c[e[n+6]]+c[e[n+7]]+"-"+c[e[n+8]]+c[e[n+9]]+"-"+c[e[n+10]]+c[e[n+11]]+c[e[n+12]]+c[e[n+13]]+c[e[n+14]]+c[e[n+15]]).toLowerCase();if(!l(i))throw TypeError("Stringified UUID is invalid");return i}var u=p;function h(e,n,i){e=e||{};var t=e.random||(e.rng||a)();if(t[6]=15&t[6]|64,t[8]=63&t[8]|128,n){i=i||0;for(var r=0;r<16;++r)n[i+r]=t[r];return n}return u(t)}n["a"]=h}}]);